<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="output.mappers.Test2Mapper">
  <resultMap id="BaseResultMap" type="output.models.Test2">
    <id column="province_id" jdbcType="INTEGER" property="provinceId" />
    <id column="city_id" jdbcType="INTEGER" property="cityId" />
    <result column="description" jdbcType="VARCHAR" property="description" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    province_id, city_id, description
  </sql>
  <select id="selectByExample" parameterType="output.models.Test2Example" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from test2
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <choose>
        <when test="offset != null">
          limit ${offset}, ${limit}
        </when>
        <otherwise>
          limit ${limit}
        </otherwise>
      </choose>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="output.models.Test2Key" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from test2
    where province_id = #{provinceId,jdbcType=INTEGER}
      and city_id = #{cityId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="output.models.Test2Key">
    delete from test2
    where province_id = #{provinceId,jdbcType=INTEGER}
      and city_id = #{cityId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="output.models.Test2Example">
    delete from test2
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="output.models.Test2">
    insert into test2 (province_id, city_id, description
      )
    values (#{provinceId,jdbcType=INTEGER}, #{cityId,jdbcType=INTEGER}, #{description,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="output.models.Test2">
    insert into test2
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="provinceId != null">
        province_id,
      </if>
      <if test="cityId != null">
        city_id,
      </if>
      <if test="description != null">
        description,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="provinceId != null">
        #{provinceId,jdbcType=INTEGER},
      </if>
      <if test="cityId != null">
        #{cityId,jdbcType=INTEGER},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="output.models.Test2Example" resultType="java.lang.Long">
    select count(*) from test2
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update test2
    <set>
      <if test="record.provinceId != null">
        province_id = #{record.provinceId,jdbcType=INTEGER},
      </if>
      <if test="record.cityId != null">
        city_id = #{record.cityId,jdbcType=INTEGER},
      </if>
      <if test="record.description != null">
        description = #{record.description,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update test2
    set province_id = #{record.provinceId,jdbcType=INTEGER},
      city_id = #{record.cityId,jdbcType=INTEGER},
      description = #{record.description,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="output.models.Test2">
    update test2
    <set>
      <if test="description != null">
        description = #{description,jdbcType=VARCHAR},
      </if>
    </set>
    where province_id = #{provinceId,jdbcType=INTEGER}
      and city_id = #{cityId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="output.models.Test2">
    update test2
    set description = #{description,jdbcType=VARCHAR}
    where province_id = #{provinceId,jdbcType=INTEGER}
      and city_id = #{cityId,jdbcType=INTEGER}
  </update>
  <insert id="insertOrUpdateManually" parameterType="map">
    insert into test2 (province_id, city_id, 
      description)
    values (#{record.provinceId,jdbcType=INTEGER}, #{record.cityId,jdbcType=INTEGER}, 
      #{record.description,jdbcType=VARCHAR})
    on duplicate key update ${updateClause}
  </insert>
  <insert id="insertSelectiveOrUpdateManually" parameterType="map">
    insert into test2
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="record.provinceId != null">
        province_id,
      </if>
      <if test="record.cityId != null">
        city_id,
      </if>
      <if test="record.description != null">
        description,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="record.provinceId != null">
        #{record.provinceId,jdbcType=INTEGER},
      </if>
      <if test="record.cityId != null">
        #{record.cityId,jdbcType=INTEGER},
      </if>
      <if test="record.description != null">
        #{record.description,jdbcType=VARCHAR},
      </if>
    </trim>
    on duplicate key update ${updateClause}
  </insert>
  <select id="selectManuallyByExample" parameterType="map" resultMap="BaseResultMap">
    select
    <if test="example.distinct">
      distinct
    </if>
    ${selectClause} from test2
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    <if test="example.limit != null">
      <choose>
        <when test="example.offset != null">
          limit ${example.offset}, ${example.limit}
        </when>
        <otherwise>
          limit ${example.limit}
        </otherwise>
      </choose>
    </if>
  </select>
  <select id="selectManuallyByPrimaryKey" parameterType="map" resultMap="BaseResultMap">
    select ${selectClause} from test2
    where province_id = #{key.provinceId,jdbcType=INTEGER}
      and city_id = #{key.cityId,jdbcType=INTEGER}
  </select>
  <update id="updateManuallyByExample" parameterType="map">
    update test2
    set ${updateClause}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateManuallyByPrimaryKey" parameterType="map">
    update test2
    set ${updateClause}
    where province_id = #{key.provinceId,jdbcType=INTEGER}
      and city_id = #{key.cityId,jdbcType=INTEGER}
  </update>
</mapper>